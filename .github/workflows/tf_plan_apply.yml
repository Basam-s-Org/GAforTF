--- 
name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

#Special permissions required for OIDC authentication
#permissions:
#  id-token: write
#  contents: read
#  pull-requests: write

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: ./scripts/tf_init.sh #TODO: Create this script to initialize Terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./pg_database

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      working-directory: ./pg_database
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan -var "azure_subscription_id = ${{ secrets.azure_subscription_id}}" -var "azure_tenant_id = ${{ secrets.azure_tenant_id}}" -var "azure_client_id = ${{ secrets.azure_client_id}}" -var "azure_client_secret = ${{ secrets.azure_client_secret}}" -var "instaclustr_api_cred = ${{ secrets.instaclustr_api_cred}}" -var "rg_name = ${{ var.rg_name}}" -var "rg_location = ${{ var.rg_location}}" -var "db_name = ${{ var.db_name}}" -var "db_version = ${{ var.db_version}}" -var "db_secret_kv = ${{ var.db_secret_kv}}" -var "firewall_rules = ${{ var.firewall_rules}}" -var "cloud_provider = ${{ var.cloud_provider}}" -var "db_extensions = ${{ var.db_extensions}}" -var "dc_name = ${{ var.dc_name}}" || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else
          exit 0
        fi

    # Save plan to artifacts
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan

    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      working-directory: ./PG_and_KV
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      working-directory: ./iac
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

#  terraform-apply:
#    name: 'Terraform Apply'
#    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
#    runs-on: ubuntu-latest
#    needs: [terraform-plan]
#    outputs:
#      aks_cluster: ${{ steps.kube_config.outputs.aks_cluster }}
#      aks_rg: ${{ steps.kube_config.outputs.aks_rg }}
#      container_registry: ${{ steps.kube_config.outputs.container_registry }}
#
#    steps:
#    # Checkout the repository to the GitHub Actions runner
#    - name: Checkout
#      uses: actions/checkout@v3
#
#    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#    - name: Setup Terraform
#      uses: hashicorp/setup-terraform@v2
#      with:
#        terraform_wrapper: false
#
#    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#    - name: Terraform Init
#      run: ./scripts/tf_init.sh #TODO: Create this script to initialize Terraform
#
#    # Download saved plan from artifacts
#    - name: Download Terraform Plan
#      uses: actions/download-artifact@v3
#      with:
#        name: tfplan
#
#    # Terraform Apply
#    - name: Terraform Apply
#      run: terraform apply -auto-approve tfplan
#      working-directory: ./iac
