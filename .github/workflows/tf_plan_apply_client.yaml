name: 'Terraform Plan/Apply'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TF_VAR_AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  TF_VAR_AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  TF_VAR_PG_PASSWORD: ${{ secrets.CLIENT_PG_PASSWORD }}
  TF_VAR_RG_NAME: ${{ vars.CLIENT_RESOURCE_GROUP }}
  TF_VAR_RG_LOCATION: ${{ vars.CLIENT_RESOURCE_LOCATION }}
  TF_VAR_CLIENT_SECRET_KV: ${{ vars.CLIENT_KEY_VAULT_NAME }}
  TF_VAR_CLIENT_RESOURCE_GROUP = ${{ vars.CLIENT_RESOURCE_GROUP }}
  TF_VAR_CLIENT_RESOURCE_LOCATION = ${{ vars.CLIENT_RESOURCE_LOCATION }}
  TF_VAR_CLIENT_ACR_NAME: ${{ vars.CLIENT_ACR_NAME }}
  TF_VAR_CLIENT_ACI_NAME: ${{ vars.CLIENT_ACI_NAME }}
  TF_VAR_CLIENT_PG_HOST: ${{ vars.CLIENT_PG_HOST }}
  TF_VAR_CLIENT_PG_USER: ${{ vars.CLIENT_PG_USER }}
  TF_VAR_CLIENT_PG_DB: ${{ vars.CLIENT_PG_DB }}
  TF_VAR_CLIENT_ACI_CPU: ${{ vars.CLIENT_ACI_CPU }}
  TF_VAR_CLIENT_ACI_MEMORY: ${{ vars.CLIENT_ACI_MEMORY }}
  TF_VAR_CLIENT_DOCKERFILES: ${{ vars.CLIENT_DOCKERFILES }}
  TF_VAR_CLIENT_TAGS: ${{ vars.CLIENT_TAGS }}

# Special permissions required for OIDC authentication
# permissions:
#   id-token: write
#   contents: read
#   pull-requests: write

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd pg_client
          ./terraform_init.sh

      # Build tfvars file
      - name: Build tfvars
        run: |
          cd pg_client
          ./build_tfvars.sh

      # Generate an execution plan for Terraform
      - name: Terraform Plan
        id: tf-plan
        working-directory: ./pg_client
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            find .
            exit 0
          fi

      # Save plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            ./pg_client/tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        working-directory: ./pg_client
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        working-directory: ./pg_client
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

# Uncomment and configure the below section to enable Terraform apply
# terraform-apply:
#   name: 'Terraform Apply'
#   if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
#   runs-on: ubuntu-latest
#   needs: [terraform-plan]
#   outputs:
#     aks_cluster: ${{ steps.kube_config.outputs.aks_cluster }}
#     aks_rg: ${{ steps.kube_config.outputs.aks_rg }}
#     container_registry: ${{ steps.kube_config.outputs.container_registry }}
#
#   steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v4
#
#     # Install the latest version of Terraform CLI
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_wrapper: false
#
#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       run: ./scripts/tf_init.sh
#
#     # Download saved plan from artifacts
#     - name: Download Terraform Plan
#       uses: actions/download-artifact@v4
#       with:
#         name: tfplan
#
#     # Apply the Terraform plan
#     - name: Terraform Apply
#       run: terraform apply -auto-approve tfplan
#       working-directory: ./pg_client
